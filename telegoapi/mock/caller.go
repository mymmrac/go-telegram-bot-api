// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mymmrac/telego/telegoapi (interfaces: Caller)
//
// Generated by this command:
//
//	mockgen -typed -package mock -destination=mock/caller.go github.com/mymmrac/telego/telegoapi Caller
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	telegoapi "github.com/mymmrac/telego/telegoapi"
	gomock "go.uber.org/mock/gomock"
)

// MockCaller is a mock of Caller interface.
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
	isgomock struct{}
}

// MockCallerMockRecorder is the mock recorder for MockCaller.
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance.
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCaller) Call(ctx context.Context, url string, data *telegoapi.RequestData) (*telegoapi.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, url, data)
	ret0, _ := ret[0].(*telegoapi.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockCallerMockRecorder) Call(ctx, url, data any) *MockCallerCallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCaller)(nil).Call), ctx, url, data)
	return &MockCallerCallCall{Call: call}
}

// MockCallerCallCall wrap *gomock.Call
type MockCallerCallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCallerCallCall) Return(arg0 *telegoapi.Response, arg1 error) *MockCallerCallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCallerCallCall) Do(f func(context.Context, string, *telegoapi.RequestData) (*telegoapi.Response, error)) *MockCallerCallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCallerCallCall) DoAndReturn(f func(context.Context, string, *telegoapi.RequestData) (*telegoapi.Response, error)) *MockCallerCallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
